{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Deploys a Check Point Management Server and runs the First Time Wizard (optional)",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "VPC Network Configuration"
					},
					"Parameters": [
						"VPC",
						"Subnet"
					]
				},
				{
					"Label": {
						"default": "EC2 Instance Configuration"
					},
					"Parameters": [
						"Name",
						"InstanceType",
						"KeyName",
						"AllocatePublicAddress",
						"VolumeSize"
					]
				},
				{
					"Label": {
						"default": "Check Point Settings"
					},
					"Parameters": [
						"Version",
						"Shell",
						"PasswordHash",
						"InstallationType"
					]
				},
				{
					"Label": {
						"default": "Management Server Settings (ignored when the installation type is set to Manual Configuration)"
					},
					"Parameters": [
						"Hostname",
						"Primary",
						"SICKey",
						"AllowUploadDownload",
						"AdminSubnet",
						"GatewaysAddresses",
						"NTPPrimary",
						"NTPSecondary"
					]
				}
			],
			"ParameterLabels": {
				"VPC": {
					"default": "VPC"
				},
				"Subnet": {
					"default": "Subnet"
				},
				"Name": {
					"default": "Name"
				},
				"Version": {
					"default": "License"
				},
				"InstanceType": {
					"default": "Instance type"
				},
				"KeyName": {
					"default": "Key name"
				},
				"AdminSubnet": {
					"default": "Administrator addresses"
				},
				"GatewaysAddresses": {
					"default": "Gateways addresses"
				},
				"Hostname": {
					"default": "Hostname"
				},
				"AllocatePublicAddress": {
					"default": "Allocate an Elastic IP"
				},
				"SICKey": {
					"default": "SIC key"
				},
				"Shell": {
					"default": "Admin shell"
				},
				"PasswordHash": {
					"default": "Password hash"
				},
				"InstallationType": {
					"default": "Installation type"
				},
				"Primary": {
					"default": "Primary management"
				},
				"VolumeSize": {
					"default": "Root volume size (GB)"
				},
				"AllowUploadDownload": {
					"default": "Allow upload & download"
				},
				"NTPPrimary": {
					"default": "Primary NTP server"
				},
				"NTPSecondary": {
					"default": "Secondary NTP server"
				}
			}
		}
	},
	"Parameters": {
		"VPC": {
			"Description": "Select an existing VPC",
			"Type": "AWS::EC2::VPC::Id",
			"MinLength": "1"
		},
		"Subnet": {
			"Description": "To access the instance from the internet, make sure the subnet has a route to the internet",
			"Type": "AWS::EC2::Subnet::Id",
			"MinLength": "1"
		},
		"Version": {
			"Type": "String",
			"AllowedValues": [
				"R80.10-BYOL",
				"R80.10-PAYG-MGMT5"
			]
		},
		"InstanceType": {
			"Type": "String",
			"Default": "m4.xlarge",
			"AllowedValues": [
				"m4.large",
				"m4.xlarge",
				"m4.2xlarge",
				"m4.4xlarge",
				"m4.10xlarge",
				"m4.16xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"Name": {
			"Default": "Check-Point-Management",
			"Type": "String"
		},
		"KeyName": {
			"Description": "The EC2 Key Pair to allow SSH access to the instance",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"MinLength": "1",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"AdminSubnet": {
			"Description": "Allow web and graphical clients only from this network to communicate with the Management Server",
			"Type": "String",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$"
		},
		"GatewaysAddresses": {
			"Description": "Allow gateways only from this network to communicate with the Management Server",
			"Type": "String",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$"
		},
		"PasswordHash": {
			"Description": "Admin user's password hash (use command \"openssl passwd -1 PASSWORD\" to get the PASSWORD's hash) (optional)",
			"Type": "String",
			"Default": "",
			"AllowedPattern": "[\\$\\./a-zA-Z0-9]*"
		},
		"InstallationType": {
			"Description": "When set to Manual Configuration, the Management Server settings will be ignored",
			"Default": "Management Server",
			"Type": "String",
			"AllowedValues": [
				"Management Server",
				"Manual Configuration"
			]
		},
		"Hostname": {
			"Description": "(optional)",
			"AllowedPattern": "^([A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?|)$",
			"ConstraintDescription": "A valid hostname label or an empty string",
			"Type": "String"
		},
		"AllocatePublicAddress": {
			"Default": "true",
			"Type": "String",
			"AllowedValues": [
				"true",
				"false"
			]
		},
		"SICKey": {
			"Description": "Secure Internal Communication activation key. Mandatory only if deploying a secondary Management Server",
			"NoEcho": "true",
			"Default": "",
			"Type": "String",
			"AllowedPattern": "(|[a-zA-Z0-9]{8,})",
			"ConstraintDescription": "Can be empty if this is a primary management server. Otherwise, at least 8 alpha numeric characters"
		},
		"Shell": {
			"Description": "Change the admin shell to enable advanced command line configuration",
			"Type": "String",
			"Default": "/etc/cli.sh",
			"AllowedValues": [
				"/etc/cli.sh",
				"/bin/bash",
				"/bin/csh",
				"/bin/tcsh"
			]
		},
		"Primary": {
			"Description": "Determines if this is the primary management server or not",
			"Type": "String",
			"Default": "true",
			"AllowedValues": [
				"true",
				"false"
			]
		},
		"NTPPrimary": {
			"Description": "(optional)",
			"Type": "String",
			"Default": "0.pool.ntp.org",
			"AllowedPattern": "[\\.a-zA-Z0-9\\-]*"
		},
		"NTPSecondary": {
			"Description": "(optional)",
			"Type": "String",
			"Default": "1.pool.ntp.org",
			"AllowedPattern": "[\\.a-zA-Z0-9\\-]*"
		},
		"VolumeSize": {
			"Type": "Number",
			"MinValue": "100",
			"Default": "100"
		},
		"AllowUploadDownload": {
			"Description": "Automatically download Blade Contracts and other important data. Improve product experience by sending data to Check Point",
			"Type": "String",
			"Default": "false",
			"AllowedValues": [
				"true",
				"false"
			]
		}
	},
	"Conditions": {
		"HostnameGiven": {
			"Fn::Not": [{
				"Fn::Equals": [{
						"Ref": "Hostname"
					},
					""
				]
			}]
		},
		"ConfigureManually": {
			"Fn::Equals": [{
					"Ref": "InstallationType"
				},
				"Manual Configuration"
			]
		},
		"AllocatePublicAddress": {
			"Fn::Equals": [{
					"Ref": "AllocatePublicAddress"
				},
				"true"
			]
		}
	},
	"Resources": {
		"AMI": {
			"Type": "AWS::CloudFormation::Stack",
			"Properties": {
				"TemplateURL": "https://s3.amazonaws.com/CloudFormationTemplate/amis.json",
				"Parameters": {
					"Version": {
						"Ref": "Version"
					}
				}
			}
		},
		"ReadyHandle": {
			"Type": "AWS::CloudFormation::WaitConditionHandle",
			"Condition": "AllocatePublicAddress",
			"Properties": {}
		},
		"ReadyCondition": {
			"Type": "AWS::CloudFormation::WaitCondition",
			"Condition": "AllocatePublicAddress",
			"DependsOn": [
				"Instance"
			],
			"Properties": {
				"Handle": {
					"Ref": "ReadyHandle"
				},
				"Timeout": "3600"
			}
		},
		"InstanceSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Management security group",
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIngress": [{
						"CidrIp": {
							"Ref": "GatewaysAddresses"
						},
						"IpProtocol": "tcp",
						"FromPort": 257,
						"ToPort": 257
					},
					{
						"CidrIp": {
							"Ref": "GatewaysAddresses"
						},
						"IpProtocol": "tcp",
						"FromPort": 18191,
						"ToPort": 18191
					},
					{
						"CidrIp": {
							"Ref": "GatewaysAddresses"
						},
						"IpProtocol": "tcp",
						"FromPort": 18210,
						"ToPort": 18210
					},
					{
						"CidrIp": {
							"Ref": "GatewaysAddresses"
						},
						"IpProtocol": "tcp",
						"FromPort": 18264,
						"ToPort": 18264
					},
					{
						"CidrIp": {
							"Ref": "AdminSubnet"
						},
						"IpProtocol": "tcp",
						"FromPort": 22,
						"ToPort": 22
					},
					{
						"CidrIp": {
							"Ref": "AdminSubnet"
						},
						"IpProtocol": "tcp",
						"FromPort": 443,
						"ToPort": 443
					},
					{
						"CidrIp": {
							"Ref": "AdminSubnet"
						},
						"IpProtocol": "tcp",
						"FromPort": 18190,
						"ToPort": 18190
					},
					{
						"CidrIp": {
							"Ref": "AdminSubnet"
						},
						"IpProtocol": "tcp",
						"FromPort": 19009,
						"ToPort": 19009
					}
				]
			}
		},
		"CheckPointManagementRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"ec2.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "CheckPointManagement",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"ec2:DescribeInstances",
								"ec2:DescribeNetworkInterfaces",
								"ec2:DescribeSubnets",
								"ec2:DescribeVpcs",
								"ec2:DescribeSecurityGroups",
								"elasticloadbalancing:DescribeLoadBalancers",
								"elasticloadbalancing:DescribeTags",
								"elasticloadbalancing:DescribeListeners",
								"elasticloadbalancing:DescribeTargetGroups",
								"elasticloadbalancing:DescribeRules",
								"elasticloadbalancing:DescribeTargetHealth",
								"autoscaling:DescribeAutoScalingGroups"
							],
							"Resource": "*"
						}]
					}
				}]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "CheckPointManagementRole"
				}]
			}
		},
		"Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Ref": "Name"
					}
				}],
				"ImageId": {
					"Fn::GetAtt": [
						"AMI",
						"Outputs.ImageId"
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyName"
				},
				"NetworkInterfaces": [{
					"DeviceIndex": "0",
					"AssociatePublicIpAddress": "false",
					"Description": "eth0",
					"GroupSet": [{
						"Ref": "InstanceSecurityGroup"
					}],
					"DeleteOnTermination": "true",
					"SubnetId": {
						"Ref": "Subnet"
					}
				}],
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/xvda",
					"Ebs": {
						"VolumeType": "gp2",
						"VolumeSize": {
							"Ref": "VolumeSize"
						}
					}
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"\n", [
								"#!/bin/bash",
								"echo template_name: management >> /etc/cloud-version",
								"echo template_version: 20171228 >> /etc/cloud-version",
								{
									"Fn::Join": [
										"", [
											"primary='",
											{
												"Ref": "Primary"
											},
											"'"
										]
									]
								},
								"secondary=false",
								"$primary || secondary=true",
								{
									"Fn::Join": [
										"", [
											"sic='",
											{
												"Ref": "SICKey"
											},
											"'"
										]
									]
								},
								{
									"Fn::Join": [
										"", [
											"hname='",
											{
												"Ref": "Hostname"
											},
											"'"
										]
									]
								},
								{
									"Fn::Join": [
										"", [
											"wait_handle='",
											{
												"Fn::If": [
													"AllocatePublicAddress",
													{
														"Ref": "ReadyHandle"
													},
													{
														"Ref": "AWS::NoValue"
													}
												]
											},
											"'"
										]
									]
								},
								"instance_id=\"$(curl_cli -s -S 169.254.169.254/latest/meta-data/instance-id)\"",
								{
									"Fn::Join": [
										"", [
											"pwd_hash='",
											{
												"Ref": "PasswordHash"
											},
											"'"
										]
									]
								},
								{
									"Fn::Join": [
										"", [
											"allow_upload_download='",
											{
												"Ref": "AllowUploadDownload"
											},
											"'"
										]
									]
								},
								{
									"Fn::Join": [
										"", [
											"ntp1='",
											{
												"Ref": "NTPPrimary"
											},
											"'"
										]
									]
								},
								{
									"Fn::Join": [
										"", [
											"ntp2='",
											{
												"Ref": "NTPSecondary"
											},
											"'"
										]
									]
								},
								{
									"Fn::Join": [
										"", [
											"shell='",
											{
												"Ref": "Shell"
											},
											"'"
										]
									]
								},
								{
									"Fn::Join": [
										"", [
											"admin_subnet='",
											{
												"Ref": "AdminSubnet"
											},
											"'"
										]
									]
								},
								"printf H4sIAEQeOVoCAzNoYuE3aGL6voCZiZGJiZHBgJeNU6vNo+07LyMjKyuDQYYhtwEnG3MoC5swU2iwoaqBMojDJSwTXJJYlJaZmpOiEJKanJGXn5OfnplarKPgmZesZ2hkYABSxi2siVDmnJNYXKxgpOCcWlSSmZaZnFiSmZ+n4FhakpFflFlSaSAnzmtgYmBmZGlobmxpaBYlzmuMzKWjS5oYFZCDgZGVgbmJkZcBKM7B1MTIyLDd6MS/l4XLWFrX8gim3D/n+/4Es0S7/cLVv22Wzf9weOGtKzfytIMn/FZZYtfyYd6L+DdP1V2+aiyzr773QOvDifXB+vNOsTJOlutPk7Fc7vsralsxi2ra6/L655HHvGaqioS8Vjv+uV7yqkFB//oNblr/177WfHt9/iqW9sVXfnYuNYm/7Tyxyexmms3GHTub/s6xshM4Yf2eLTWtarakhO3/wkAbA734fbblxZti2XIOK4fN0m5VmySznGnzE3ve9RyVTTvMbF/NuWy6eU/mqa9n5r74m9Ir3mCcF+cVO/OkXPuWuVIHruYJmyrH3Z8db/v+2veyQ6/sdlfwyjilZ7Pc+HHtVn73J5cFjKuZGJkXNx41aDxkIAsMW1k+FjEWkf3x2y+euyvf9iU6dM2d6wKH+FZ2PDdonASSV2Zp7DJobG/AqmZhzpIs+kVtEzCB84DcJMzCasDMyPgfLbkzg6KXda59x9yLJ6VCF67J/Pw58tZsxnYp//CVCys5tW5/198kd+Z4XNaN5vaF0997mtqVszlGJO3vi9jBlW7/ZvNdxTT5kyG/is7Y+jjcaFxfPq+5avei419NxPtuCjp8+aOj5StavzwpVk/1MgO3gpRsxk/xHV/2dr/ViLzrK9Yt3nxiU+px3aqlq/YEt+XeDV9y6oeCI3fGhy+/S/aFxVZVfv0p2/pYd+q+r4UTnM/0ys9i4GrXfBmqFMGg/OqxkLNmtDvH3R7HrFS2FU8VVzlumao4dWftRZPVwtfW7rnzyNby7F670oKFEpHMJ5W29M+5Gqd1fem2K1y5P7Y7CLrNkq/kS9rPP/3NA3158SkAHEuNARMEAAA= | base64 -d | gunzip -c | cpopenssl x509 -inform DER >$CPDIR/tmp/wait-handle.crt",
								"cat $CPDIR/conf/ca-bundle.crt >>$CPDIR/tmp/wait-handle.crt",
								"test -z \"$pwd_hash\" || {",
								"   echo \"set admin password\"",
								"   clish -c \"set user admin password-hash $pwd_hash\" -s",
								"}",
								"echo \"set admin shell\"",
								"clish -c \"set user admin shell $shell\" -s",
								{
									"Fn::If": [
										"ConfigureManually",
										{
											"Ref": "AWS::NoValue"
										},
										{
											"Fn::Join": [
												"\n", [
													"if $primary; then",
													"   sic=notused",
													"elif test -z \"$sic\"; then",
													"    curl_cli -s -S --cacert $CPDIR/tmp/wait-handle.crt -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"FAILURE\", \"Reason\" : \"SIC key must be provided if installing a non primary management server\", \"UniqueId\" : \"'$instance_id'\", \"Data\" : \"None\"}' \"$wait_handle\"",
													"    exit 1",
													"fi",
													"test -z \"$hname\" || {",
													"   echo \"set hostname\"",
													"   clish -c \"set hostname $hname\" -s",
													"}",
													"test -z \"$ntp1\" || {",
													"   echo \"set primary NTP server\"",
													"   clish -c \"set ntp server primary $ntp1 version 4\" -s",
													"   test -z \"$ntp2\" || {",
													"       echo \"set secondary NTP server\"",
													"       clish -c \"set ntp server secondary $ntp2 version 4\" -s",
													"   }",
													"   clish -c \"set ntp active on\" -s",
													"}",
													"admin_subnet_ip=\"$(echo $admin_subnet | cut -d '/' -f 1)\"",
													"admin_subnet_bits=\"$(echo $admin_subnet | cut -d '/' -f 2)\"",
													"conf=\"install_security_gw=false\"",
													"conf=\"${conf}&install_security_managment=true\"",
													"conf=\"${conf}&install_mgmt_primary=$primary\"",
													"conf=\"${conf}&install_mgmt_secondary=$secondary\"",
													"conf=\"${conf}&mgmt_admin_radio=gaia_admin\"",
													"conf=\"${conf}&mgmt_gui_clients_radio=network\"",
													"conf=\"${conf}&mgmt_gui_clients_ip_field=${admin_subnet_ip}\"",
													"conf=\"${conf}&mgmt_gui_clients_subnet_field=${admin_subnet_bits}\"",
													"conf=\"${conf}&ftw_sic_key=$sic\"",
													"conf=\"${conf}&download_info=$allow_upload_download\"",
													"conf=\"${conf}&upload_info=$allow_upload_download\"",
													"config_system -s \"$conf\""
												]
											]
										}
									]
								},
								"rc=$?",
								"if test -n \"$wait_handle\"; then",
								"    if test $rc -ne 0; then",
								"        curl_cli -s -S --cacert $CPDIR/tmp/wait-handle.crt -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"FAILURE\", \"Reason\" : \"First time wizard failed\", \"UniqueId\" : \"'$instance_id'\", \"Data\" : \"None\"}' \"$wait_handle\"",
								"    else",
								"        curl_cli -s -S --cacert $CPDIR/tmp/wait-handle.crt -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"SUCCESS\", \"Reason\" : \"Instance Configuration Complete\", \"UniqueId\" : \"'$instance_id'\", \"Data\" : \"Configuration completed.\"}' \"$wait_handle\"",
								"    fi",
								"fi",
								"chkconfig --add autoprovision",
								"service autoprovision start",
								""
							]
						]
					}
				}
			}
		},
		"PublicAddress": {
			"Type": "AWS::EC2::EIP",
			"Condition": "AllocatePublicAddress",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"AddressAssoc": {
			"Type": "AWS::EC2::EIPAssociation",
			"Condition": "AllocatePublicAddress",
			"Properties": {
				"InstanceId": {
					"Ref": "Instance"
				},
				"AllocationId": {
					"Fn::GetAtt": [
						"PublicAddress",
						"AllocationId"
					]
				}
			}
		}
	},
	"Outputs": {
		"InstallationType": {
			"Description": "Type of Check Point Instance that was created",
			"Value": {
				"Ref": "InstallationType"
			}
		},
		"PublicAddress": {
			"Condition": "AllocatePublicAddress",
			"Description": "The public address of the management server",
			"Value": {
				"Ref": "PublicAddress"
			}
		},
		"SSH": {
			"Condition": "AllocatePublicAddress",
			"Description": "SSH command",
			"Value": {
				"Fn::Join": [
					"", [
						"ssh admin@",
						{
							"Ref": "PublicAddress"
						}
					]
				]
			}
		},
		"URL": {
			"Condition": "AllocatePublicAddress",
			"Description": "URL to the portal",
			"Value": {
				"Fn::Join": [
					"", [
						"https://",
						{
							"Ref": "PublicAddress"
						}
					]
				]
			}
		}
	}
}